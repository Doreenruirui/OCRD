#!/bin/bash

ENGINE="kraken"

# ocropy parameters
NOCHECK=0
THRESHOLD=0.5
INPUT=""
OUTPUT="out"
ZOOM=0.5
ESCALE=1.0
BIGNORE=0.1
PERC=80
RANGE=20
MAXSKEW=2
GRAY=5
LO=5
HI=90
SKEWSTEPS=8
DEBUG=0
PARALLEL=0


usage_ocropus()
{
   echo "Parameters for binarizing a image by Ocropus:"
   echo "positional arguments:"
   echo "   files"
   echo "optional arguments:"
   echo "-h, --help             show this help message and exit"
   echo "-n, --nocheck          disable error checking on inputs"
   echo "-t, --threshold THRESHOLD"
   echo "                       threshold, determines lightness, default: 0.5"
   echo "-z ZOOM, --zoom ZOOM   zoom for page background estimation, smaller=faster, default: 0.5"
   echo "-e ESCALE, --escale ESCALE"
   echo "                       scale for estimating a mask over the text region, default: 1.0"
   echo "-b BIGNORE, --bignore BIGNORE"
   echo "                       ignore this much of the border for threshold estimation, default: 0.1"
   echo "-p PERC, --perc PERC   percentage for filters, default: 80"
   echo "-r RANGE, --range RANGE"
   echo "                       range for filters, default: 20"
   echo "-m MAXSKEW, --maxskew MAXSKEW"
   echo "                       skew angle estimation parameters (degrees), default: 2"
   echo "-g, --gray             force grayscale processing even if image seems binary"
   echo "--lo LO                percentile for black estimation, default: 5"
   echo "--hi HI                percentile for white estimation, default: 90"
   echo "--skewsteps SKEWSTEPS  steps for skew angle estimation (per degree), default: 8"
   echo "--debug DEBUG          display intermediate results, default: 0"
   echo "--show                 display final result"
   echo "--rawcopy              also copy the raw image"
   echo "-o OUTPUT, --output OUTPUT"
   echo "                       output directory, [default: out]"
   echo "-Q PARALLEL, --parallel PARALLEL"
}

usage_kraken()
{
    echo "Parameters for binarizing a image by Kraken:"
    echo "--threshold FLOAT     [default: 0.5]"
    echo "--zoom FLOAT          [default: 0.5]"
    echo "--escale FLOAT        [default: 1.0]"
    echo "--border FLOAT        [default: 0.1]"
    echo "--perc INTEGER RANGE  [default: 80]"
    echo "--range INTEGER       [default: 20]"
    echo "--low INTEGER RANGE   [default: 5]"
    echo "--high INTEGER RANGE  [default: 90]"
    echo "--help                Show this message and exit."
}


usage()
{
    echo "Image binarization."
#    echo ""
    echo "	-h --help               show this help message and exit"
    echo "	--engine                the engine used to binarize the images: ocropus/tesseract/kraken/calamari, [default: kraken]"
    echo "	--manual                show the help message for the engine"
    echo "	--input                 input path"
    echo "	--output                output path"
}

while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | awk -F= '{print $2}'`
    case $PARAM in
        -h | --help)
            usage
            exit
            ;;
        -eh | --manual)
            if [[ $ENGINE == 'ocropus' ]]; then
                usage_ocropus
            elif  [[ $ENGINE == 'kraken' ]]; then
                usage_kraken
            else
                echo 'Please choose an engine from: ocropus, kraken, calamari or tesseract'
            fi
            exit
            ;;
        --engine)
            ENGINE=$VALUE
            if [[ $ENGINE != 'ocropus' && $ENGINE != 'kraken' && $ENGINE != 'calamari' && $ENGINE != 'tesseract' ]]; then
                echo 'Please choose an engine from: ocropus, kraken, calamari or tesseract'
                exit 1
            fi
            ;;
        --input)
            INPUT="$VALUE"
            ;;
        --output)
            OUTPUT=$VALUE
            ;;
        -n | --nocheck)
            NOCHECK=1
	    ;;
	*)
            echo "ERROR: unknown parameter \"$PARAM\""
            usage
            exit 1
            ;;
    esac
    shift
done


echo "ENGINE is $ENGINE";
if [[ $ENGINE == 'ocropus' ]]; then
    echo "Load Engine $ENGINE"
    echo "processing file $INPUT"
    echo  "Results are stored in $OUTPUT"
    source activate ocropus_env
    if [[ $NOCHECK ==  1 ]]; then
	    check_flag=' -n'
    else
	    check_flag=''
    fi
    ocropus-nlbin $INPUT -o $OUTPUT -t $THRESHOLD$check_flag
    source deactivate
elif [[ $ENGINE == 'kraken' ]]; then
    echo "Load Engine $ENGINE"
    source activate kraken
    kraken -i $INPUT $OUTPUT binarize
    source deactivate
fi

